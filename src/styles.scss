$my_user_id: 175005199 !default;
$my_user_name: "joosthobma" !default;
$test_username: "vandergeest" !default;
$test_labels: "QA-Test", "qa-test" !default;

:root {
  --f-merge: #8957e5;
  --f-merge-border: #8957e5;
  --f-error: #da3633;
  --f-error-border: rgb(109 27 26);
  --f-warning: rgb(236, 164, 6);
  --f-warning-border: rgb(210 153 34);
  --f-positive: #238636;
  --f-positive-border: #1f4429;
  --f-info: #4493f8;
  --f-info-border: #1f3356;
}

/* 
-- OUTLINE COMMENTS --
 */

/* configure an outline for comments */
.review-thread-component {
  --comment-outline-color: var(--f-error-border);
  outline: 2px solid var(--comment-outline-color);
  opacity: var(--comment-opacity);
  border: none !important;

  > summary {
    background-color: var(--comment-outline-color) !important;
  }
}

/* always show the comment   */
.js-comment-container:hover {
  opacity: 1;
}

/* set the comment to orange when I commented last */
:where(
    .review-thread-component:has(
        .js-comments-holder > div:nth-last-child(1) img[src*="#{$my_user_id}"]
      )
  ) {
  --comment-outline: 2px solid var(--f-warning-border);
  transition: 0.15s ease;
}

/* gray out the comment and mark it green when i commented last with a commit hash */
:where(
    .review-thread-component:has(
        .js-comments-holder > div:nth-last-child(1) img[src*="#{$my_user_id}"]
      ):has(
        .js-comments-holder > div:nth-last-child(1) .commit-link,
        [href*="/compare/"]
      )
  ) {
  --comment-outline-color: var(--f-positive-border);
  --comment-opacity: 0.5;
}

.review-thread-component[data-resolved="true"] {
  --comment-outline-color: var(--f-positive-border);
}

/* 
-- DRAFT BUTTON COLOR --
*/

/* outline the tag button with red */
[reviewable_state="draft"] {
  outline: 1rem solid var(--f-merge);
}

/* 
-- BODY BORDER COLOR --
*/

body {
  --body-color: transparent;
  border-left: 1rem solid var(--body-color) !important;
}

/* The body color is orange. when a tag with qa-test is applied */
%test-label-body-style {
  --body-color: var(--f-warning);
}
@each $test_label in $test_labels {
  body:has(.discussion-sidebar-item [data-name*="#{$test_label}"]) {
    @extend %test-label-body-style;
  }
}

/* The body color is green when a tester left a comment  */
body:has(.author[href*="#{$test_username}"]) {
  --body-color: var(--f-positive);
}

/* The body color is red when the PR is in draft */
body:has([reviewable_state="draft"]) {
  --body-color: var(--f-error);
}

/* The body color is red when the PR has pipeline issues */
body:has(.merge-status-item .color-fg-danger) {
  --body-color: var(--f-error);
}

body:has(.State--merged) {
  --body-color: var(--f-merge);
}

/* 
-- EXTRA QUALITY OF LIFE CHANGES --
 */

/* add absolute time */
relative-time:after {
  font-size: 70%;
  content: " " attr(datetime);
  font-weight: bold;
  opacity: 0.5;
}

/* resize the sidebar */
.Layout-sidebar {
  resize: horizontal;
}

/* hide draftS IN PR List */
.js-issue-row:has([aria-label*="Draft"], [href*="dependabot"]):not(:hover) {
  opacity: 0.4;
}

/* disable the merge button for PR that are not from me */
#discussion_bucket:has(
    .TimelineItem:nth-child(1):has([alt*="#{$my_user_name}"])
  )
  .merge-message
  .BtnGroup:not(:hover) {
  opacity: 0.2;
  cursor: not-allowed;
}

/* 
-- LOCK MERGE --
 */
#lock-merge {
  position: fixed;
  bottom: 0;
  right: 0;
  z-index: 999;
}

/*
-- MESSAGES --
*/

.fs-messages:before,
.fs-errors:before,
.fs-error,
.fs-message {
  --background: var(--f-info-border);
  --border: var(--f-info);
  content: var(--message);
  padding: 8px;
  background-color: var(--background);
  color: white;
  border-radius: 4px;
  margin-bottom: 1rem;
  display: flex;
  border-left: 8px solid var(--border);
}

:where(.fs-message, .fs-error) a {
  color: inherit;
  text-decoration: underline;
}

.fs-errors:before,
.fs-error {
  content: var(--error);
  --background: var(--f-error-border);
  --border: var(--f-error);
}

body:has(#lock-merge:checked) {
  --error: "Merging is blocked!";
}

body:has([title*="fixup!"]) {
  --error: "Please rebase fixups before merging!";
}

@mixin disabled-button {
  .fs-errors + div {
    [class*="prc-Button-ButtonBase"] {
      opacity: 0.2;
      pointer-events: none;
    }
    cursor: not-allowed;
  }
}

body:has(.fs-error) {
  @include disabled-button;
}

@container style(--error) {
  body {
    @include disabled-button;
  }
}

body:not(
    body:has(
        .js-discussion > .TimelineItem:nth-child(1) [alt*="#{$my_user_name}"]
      )
  ) {
  --error: "This is not your PR to merge!";
}

/* 
-- SHORTCUTS --
*/

[data-shortcut-label] {
  --background: rgba(255, 255, 255, 0.1);
  &:after {
    content: attr(data-shortcut-label);
    font-size: 0.8rem;
    background-color: var(--background);
    outline: 4px solid var(--background);
    color: rgba(255, 255, 255, 0.8);
    margin-left: 0.5rem;
    font-weight: bold;
    text-decoration: none;
    border-radius: 1px;
  }
}

.fs-copied {
  --background: var(--f-info-border);
}
